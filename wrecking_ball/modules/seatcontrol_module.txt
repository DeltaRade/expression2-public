@name seatrotationcontrol
@inputs CamController:entity
@persist SEATROTATION_Seat:entity SEATROTATION_RootHolo:number CamController:entity
@persist SEATROTATION_CamLink:wirelink SEATROTATION_ThirdPerson SEATROTATION_Active SEATROTATION_Angle SEATROTATION_EyePos:vector

#include "betterhololib"

if( first() ){
    
    # no warnings
    SEATROTATION_Seat = noentity()
    SEATROTATION_Active = 0
    SEATROTATION_EyePos = vec(0.00,0.00,33.18)
    
    function seatrotation_internal_setupCamController(){
        if(CamController:isValid()){
            SEATROTATION_Seat:linkTo(CamController)
            SEATROTATION_CamLink = CamController:wirelink()
            SEATROTATION_CamLink["Position",vector]  = SEATROTATION_EyePos
            SEATROTATION_CamLink["Parent",entity]    = SEATROTATION_Seat
        }
    }
    
    # thanks to my internship and angular dependency injection for this programming pattern!
    function seatrotation_setup(Seat:entity, RootHolo:number){
        SEATROTATION_Seat = Seat
        SEATROTATION_RootHolo = RootHolo
        seatrotation_internal_setupCamController()
    }
    function seatrotation_setThirdPerson(Mode:number){
        SEATROTATION_ThirdPerson = Mode ? 1 : 0
    }
    #[
    (this doesn't work)
    CamController = spawnCamController(
        vec(),
        ang(),
        1, # number freeze
        1, # number parentLocal
        1, # number autoMove,
        0, # number localMove,
        1, # number allowZoom,
        0, # number autoUnclip,
        0, # number drawPlayer,
        0, # number autoUnclip_IgnoreWater,
        1  # number drawParent
    )
    ]#

}

event tick(){
    #print(ops())
    local On = SEATROTATION_Seat:driver():isValid()
    
    SEATROTATION_CamLink["Activated",number] = On
    SEATROTATION_CamLink["Distance",number]  = SEATROTATION_ThirdPerson * 200
    
    if( On ){
        local Yaw1 = SEATROTATION_Seat:angles():yaw() + 90
        local Yaw2 = SEATROTATION_CamLink["CamAng",angle]:yaw()
        Diff = abs(angnorm(Yaw1-Yaw2))
        if( Diff > 15 ){
            holoAng(SEATROTATION_RootHolo, ang(0,Yaw2,0))
            SEATROTATION_Angle = Yaw2
            #SEATROTATION_Seat:setAng( ang(0,Yaw2-90,0) )
        }
        else {
            holoAng(SEATROTATION_RootHolo,holoEntity(SEATROTATION_RootHolo):angles()*ang(0,1,0))
        }
    }
    
}
event removed(N:number){
    SEATROTATION_Seat:unlinkFrom(CamController)
}

if( ~CamController ){
    seatrotation_internal_setupCamController()
}

